syntax = "proto3";

package tolar.proto;

//import "google/api/annotations.proto";

//import "tolar/proto/transaction.proto";

service BlockchainService {
    rpc GetBlockCount(GetBlockCountRequest) returns (GetBlockCountResponse);
    rpc GetBlockByHash(GetBlockByHashRequest) returns (GetBlockResponse);
    rpc GetBlockByIndex(GetBlockByIndexRequest) returns (GetBlockResponse);
    rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse);
    rpc GetBlockchainInfo(GetBlockchainInfoRequest) returns (GetBlockchainInfoResponse);
    rpc GetTransactionList(GetTransactionListRequest) returns (GetTransactionListResponse);
    rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse);
    rpc GetLatestBalance(GetBalanceRequest) returns (GetBalanceResponse);
    rpc GetNonce(GetNonceRequest) returns (GetNonceResponse);
    rpc TryCallTransaction(Transaction) returns (TryCallTransactionResponse);
}

message SignatureData {
    bytes hash = 1;
    bytes signature = 2;
    bytes signer_id = 3;
}

message Transaction {
    bytes sender_address = 1;
    bytes receiver_address = 2;
    bytes value = 3;
    bytes gas = 4;
    bytes gas_price = 5;
    string data = 6;
    bytes nonce = 7;
}

message SignedTransaction {
    Transaction body = 1;
    SignatureData sig_data = 2;
}

message TxExecutionResult {
    bytes gas_used = 1;
    bytes gas_refunded = 2;
    bytes new_address = 3;
    string output = 4;
    bool excepted = 5;
}

message ExecutedTransaction {
    SignedTransaction signed_transaction = 1;
    TxExecutionResult execution_result = 2;
}

message GetBlockCountRequest {
}

message GetBlockCountResponse {
    uint64 block_count = 1;
}

message GetNonceRequest {
  bytes address = 1;
}

message GetNonceResponse {
  bytes nonce = 1;
}

message GetBlockByHashRequest {
    bytes block_hash = 1;
}

message GetBlockByIndexRequest {
    uint64 block_index = 1;
}

message GetBalanceRequest {
  bytes address = 1;
  uint64 block_index = 2;
}

message GetBalanceResponse {
  bytes balance = 1;
  uint64 block_index = 2;
}

message GetBlockResponse {
    uint64 block_index = 1;
    bytes hash = 2;
    bytes previous_block_hash = 3;
    repeated bytes transaction_hashes = 4;
    uint64 confirmation_timestamp = 5;
}

message GetTransactionRequest {
    bytes transaction_hash = 1;
}

message GetTransactionResponse {
    bytes block_hash = 1;
    uint64 transaction_index = 2;
    bytes sender_address = 3;
    bytes receiver_address = 4;
    bytes value = 5;
    bytes gas = 6;
    bytes gas_price = 7;
    string data = 8;
    bytes nonce = 9;
    uint64 confirmation_timestamp = 10;
    bytes gas_used = 11;
    bytes gas_refunded = 12;
    bytes new_address = 13;
    string output = 14;
    bool excepted = 15;
}

message GetBlockchainInfoRequest {
}

message GetBlockchainInfoResponse {
    uint64 confirmed_blocks_count = 1;
    uint64 total_blocks_count = 2;
    bytes last_confimed_block_hash = 3;
}

message GetTransactionListRequest {
    repeated bytes addresses = 1;
    uint64 limit = 2;
    uint64 skip = 3;
}

message GetTransactionListResponse {
    repeated GetTransactionResponse transactions = 1;
}

message TryCallTransactionResponse {
    string output = 1;
}
